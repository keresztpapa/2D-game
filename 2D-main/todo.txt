CORE.PY

- [+] initialize pygame
- [] setup the core
- [+] set caption
- [+] main loop 
- [+] exits
- [+] display update
- [] 

OPENING.PY

- [+] Background
- [+] ÜRES OLDAL -> DOBOZOK ( NEW GAME / LOAD GAME)
- [+] dinamikusan dobálja a main ből (szöveg, pozició)
- [+] DRAW BOX
- [+] TEXT KEZELÉS
- [+] NEW GAME -> CHOOSE CHAR
- [+] ÖSSZEFŰZÉS a CORE.PY al
- [+] HOVER
- [+] CLICK
- [~] Event kezelés
- [+] LEFT BUTTON
- [+] hozzá kéne toldani jobbra ugyanebben a felállásban
--------------
- [+] kéne egy ugyanilyen method csak nem egymás mellett van a 3 box hanem egymásra téve -> new game / load game // settings
- [+] NEW GAME -> Char Selection -> meg kéne oldani a 'box'okon a karakter képét + kicsit feljebb helyezni a szöveget
- [+] LOAD GAME ->
- [+] SETTINGS ->
- [+] ha ki lett választva egy char azt kéne befűzni a game be 
- [+] középen a karakter 2 oldalt a kijelzőnek meg box párok [--] _stat_név & stat_érték:_ [++]
- [+] CHAR SELECT = a név az const (dovahkiin)
- [+] statokat kell elosztani
- [+] kéne egy remaining points valahova

- [] a láda rendszert kéne megcsinálni
- [] inventory system
- [] harc rendszer mint a pokemon ba


GAME.PY
- [] játék különböző fázisait fogja lefűzni


ENGINE.PY
- [] Projectile
- [+] Chest
- [] Containing loot
//////////need repair
- [] Chest interaction
- [] interaction
- [] items



CHARS.PY

- [+] constructor
- [~] stats ( X, Y, HP, DMG, PÉNZ, SPRITE)
- [+] SKILL points
- [+] mozgás
- [+] karakter megjelenités
- [+] össze fűzés a dolgokkal
- [+] visszatéréseket megmódkolni



CONST.PY

random dolgok amit konstansok


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


import pygame, sys, time

import engine
import opening
import game
import constans
pygame.init()



class Character():

    Walk_Left = []
    Walk_Right = []
    Walk_Up = []
    Walk_Down = []

    #constructor
    def __init__(self, hp, dmg, deff, pos_x, pos_y):
        self.name = constans.NAME
        self.hp = hp
        self.dmg = dmg
        self.deff = deff
        self.skill = 0
        self.pos_x = pos_x
        self.pos_y = pos_y

    def get_pos_x(self):
        return self.pos_x

    def get_pos_y(self):
        return self.pos_y

    def get_hp(self):
        return self.hp

    def get_dmg(self):
        return self.dmg

    def get_deff(self):
        return self.deff

    def get_skill(self):
        return self.skill

    def set_hp(self, x):
        self.hp = x

    def set_dmg(self, x):
        self.dmg = x

    def set_deff(self, x):
        self.deff = x

    def set_skill(self,x):
        self.skill = x


class Hero(Character):
    def __init__(self,hp, dmg, deff, pos_x, pos_y):
        super().__init__(hp, dmg, deff, pos_x, pos_y)
        self.name = constans.NAME


    def action(self,win,bg,spr):

        step = 0
        r = True
        left = False
        right = False
        up = False
        down = False
        vel = 10
        last_dir = None

        if spr == "bal":
            Walk_Left = [pygame.image.load('mage_l1.gif'),pygame.image.load('mage_l2.gif')]
            Walk_Right = [pygame.image.load('mage_r1.gif'),pygame.image.load('mage_r2.gif')]
            Walk_Up = [pygame.image.load('mage_b1.gif'),pygame.image.load('mage_b2.gif')]
            Walk_Down = [pygame.image.load('mage_f1.gif'),pygame.image.load('mage_f2.gif')]
            Standing = pygame.image.load('mage_f1.gif')
        if spr == "jobb":
            Walk_Left = [pygame.image.load('witch_l1.gif'),pygame.image.load('witch_l2.gif')]
            Walk_Right = [pygame.image.load('witch_r1.gif'),pygame.image.load('witch_r2.gif')]
            Walk_Up = [pygame.image.load('witch_b1.gif'),pygame.image.load('witch_b2.gif')]
            Walk_Down = [pygame.image.load('witch_f1.gif'),pygame.image.load('witch_f2.gif')]
            Standing = pygame.image.load('witch_f1.gif')

        c = engine.Chest(100,300)
        
        while r:
            win.fill(constans.BLACK)
            win.blit(pygame.transform.scale(bg, (constans.WIN_X, constans.WIN_Y)), (0, 0))

            pygame.time.delay(80)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    r = False

            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT] and self.pos_x > vel :
                self.pos_x -= vel
                win.blit(Walk_Left[step], (self.pos_x,self.pos_y))
                step+=1
                last_dir = "bal"

            elif keys[pygame.K_RIGHT] and self.pos_x < constans.WIN_X - vel - 20:
                self.pos_x += vel
                win.blit(Walk_Right[step], (self.pos_x,self.pos_y))
                step+=1
                last_dir = "jobb"

            elif keys[pygame.K_UP] and self.pos_y > vel:
                self.pos_y -= vel
                win.blit(Walk_Up[step],(self.pos_x,self.pos_y))
                step+=1
                last_dir = "fel"

            elif keys[pygame.K_DOWN] and self.pos_y < constans.WIN_Y -vel-20:
                self.pos_y += vel
                win.blit(Walk_Down[step],(self.pos_x,self.pos_y))
                step+=1
                last_dir = "le"

            elif keys[pygame.K_SPACE]:
                return False

            else:
                if last_dir == "le":
                    win.blit(Standing,(self.pos_x,self.pos_y))
                elif last_dir == "fel":
                    win.blit(Walk_Up[0],(self.pos_x,self.pos_y))
                elif last_dir == "bal":
                    win.blit(Walk_Left[0],(self.pos_x,self.pos_y))
                elif last_dir == "jobb":
                    win.blit(Walk_Right[0],(self.pos_x,self.pos_y))
                elif last_dir == None:
                    win.blit(Standing,(self.pos_x,self.pos_y))


            if step > 1:
                step = 0
            c.chest_show(win)
            pygame.display.update()
